@page "/clients"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BWAdminUi.Shared
@using Models.Post
@attribute [Authorize]
@inject HttpClient Http

<h1>Klanten overzicht</h1>

@if (_filteredClients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>Naam</th>
            <th>Referentie</th>
            <th>Adres</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td></td>
            <td width="240">
                <input width="70" @onchange="OnNameChange"  />
            </td>
        </tr>
        @foreach (var client in _filteredClients)
        {
            <tr>
                <td>Todo go to detail</td>
                <td>@client.Info.Name</td>
                <td>@client.ClientReference</td>
                <td>@client.Info.StraatNaam @client.Info.HuisNummer @client.Info.BusNummer</td>
                <td>@client.Info.Postcode @client.Info.Gemeente</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<ClientDto> _filteredClients;
    private List<ClientDto> _allClients;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _allClients = await Http.GetFromJsonAsync<List<ClientDto>>("api/clients/all");
            _filteredClients = _allClients;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void OnNameChange(ChangeEventArgs e)
    {
        _filteredClients = SortByName(e.Value.ToString()).ToList();

    }

    private IEnumerable<ClientDto> SortByName(string sortString) 
    {
        if (string.IsNullOrEmpty(sortString))
        {
            return _allClients;
        }

        return _allClients.Where(x => x.Info.Name.Contains(sortString));
    }

}